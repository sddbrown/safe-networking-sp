#!/usr/bin/env python3.6
'''
 The purpose of SafeNetworking is to provided extended, API driven reporting
 of known malicious behavior and malware for any device within a network.  
 SafeNetwork is initially intended for the Service Provider market as it is able
 to show providers what malware and other malicious software is using C&C 
 channels to alert external systems that they are, indeed, intact and 
 functioning
'''
import time
import requests
import threading
from project import app, es
from project.dns.runner import processDNS


# This decorator gets kicked off the first time a request is made to the 
# application.  We are forcing it with the initProcs() call so we start 
# processing in the background as soon as the application is started. 
@app.before_first_request
def activate_job():
    
    def runDNS():
        ''' 
        Searches for any unprocessed sfn-dns documents, changes them to in proce
        and then sends a call to the dns handler to process them with AF, do 
        lookups, etc.
        '''
        while True:
            app.logger.debug("Processing new DNS events")
            processDNS()
            #time.sleep(app.config["POOL_TIME"])
    
    def runIoT():
        ''' 
        DOES NOTHING AS OF NOW - but will do this eventually:
        Searches for any unprocessed sfn-iot documents and
        then sends a call to the iot handler to process them.
        '''
        pass

    # Start the DNS processing routines
    threadDNS = threading.Thread(target=runDNS)
    threadDNS.start()
    # Start the IoT processing routines 
    threadIoT = threading.Thread(target=runIoT)
    threadIoT.start()


def initBackgroundProcs():
    ''' 
    Loops until it can access the first page and then exits.  This is used by 
    the @app.before_first_request to start up the background processes for this
    application to have it's data gathered, maniplutated and stored properly. 
    '''

    # Check to make sure we have the API key(s) set first
    if app.config['AUTOFOCUS_API_KEY'] == "NOT-SET":
        app.logger.critical("API Key for Autofocus is not set in .panrc, exiting")
        exit()
        
    def initProcs():
        not_started = True
        app.logger.info("Initializing Background Processes")
        
        while not_started:
            try:
                r = requests.get('http://127.0.0.1:5000/')
                if r.status_code == 200:
                    #app.logger.info('\nSafeNetworking server started')
                    not_started = False
            except:
                    app.logger.info('\nServer not yet started')
                    time.sleep(2)     
        
    thread = threading.Thread(target=initProcs)
    thread.start()


from project.views import *

if __name__ == '__main__':
    initBackgroundProcs()
    app.logger.info('Background processes initialized')
    app.run(host="0.0.0.0")
