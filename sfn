#!/usr/bin/env python3.6
'''
 The purpose of SafeNetworking is to provided extended, API driven reporting
 of known malicious behavior and malware for any device within a network.  
 SafeNetwork is initially intended for the Service Provider market as it is able
 to show providers what malware and other malicious software is using C&C 
 channels to alert external systems that they are, indeed, intact and 
 functioning
'''
import time
import requests
import unittest
import threading
#from flask_script import Manager
from project import create_app
from elasticsearch import Elasticsearch, TransportError

# Create the Flask application 
app = create_app()

# Set up the ElasticSearch object for our instance of ES
es = Elasticsearch([{'host': app.config["ELASTICSEARCH_HOST"],
                     'port': app.config["ELASTICSEARCH_PORT"]}])

app.logger.debug("ElasticSearch host is: {0}".format(app.config["ELASTICSEARCH_HOST"]))
# This decorator gets kicked off the first time a request is made to the 
# application.  We are forcing it with the initProcs() call so we start 
# processing in the background as soon as the application is started. 
@app.before_first_request
def activate_job():
    def runDNS():
        ''' 
        Searches for any unprocessed sfn-dns documents, changes them to in process
        and then sends a call to the dns handler to process them with AF, do 
        lookups, etc.
        '''
        docList = list()
        try:
            docs = es.search(index="sfn-dns",
                             body={
                             "query": { 
                               "bool": { 
                                 "must": [
                                   {"match": { "threat_category": "wildfire" }}, 
                                   {"match": { "processed": "0" }}
                                 ]}},
                             "sort": [{"msg_gen_time": {"order": "desc"}}]
                             })
            
            app.logger.info("Found {0} unpropcessed document(s) for sfn-dns"
                                .format(docs['hits']['total']))

            # Get the document ID for each unprocessed doc and add it to the list. 
            # Then set the processed term to 17 (picked up)
            for doc in range(5): # docs['hits']['hits']:
                print(doc['_id'])
                docList.append(doc['_id'])
                es.update(index="sfn-dns",id=doc['_id'],
                            body={"doc": {"processed": 17}})
        except TransportError:
            app.logger.warning('Initialization was unable to find the index {0}'
                                .format(index))
                
            
        # Initiate
        #docIds = startProcessing()
        pprint.pformat(json.dumps(docIds))
        app.logger.debug("Found {0}".format(docIds))


    def runIoT():
            while True:
                print("Run IoT recurring task")
                time.sleep(3)

    threadDNS = threading.Thread(target=runDNS)
    threadDNS.start()

    threadIoT = threading.Thread(target=runIoT)
    threadIoT.start()


def initBackgroundProcs():
    ''' 
    Loops until it can access the first page and then exits.  This is used by 
    the @app.before_first_request to start up the background processes for this
    application to have it's data gathered, maniplutated and stored properly. 
    '''
        
    def initProcs():
        not_started = True
        print('Initializing Background Processes')
        app.logger.info("Initializing Background Processes")
        
        while not_started:
            r = requests.get('http://127.0.0.1:5000/')
            if r.status_code == 200:
                print('SafeNetworking server started')
                not_started = False
            else:
                print('Server not yet started - {0}'.format(r.status_code))
                time.sleep(2)

       
    
    thread = threading.Thread(target=initProcs)
    thread.start()

from project.api.views import *

if __name__ == '__main__':
    initBackgroundProcs()
    print('Background processes initialized')
    app.logger.info('Background processes initialized')
    app.run(host="0.0.0.0")
